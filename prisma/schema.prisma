// File: /prisma/schema.prisma
// Description: FINAL, complete, and multi-tenant ready schema.
// This version uses the correct UUID generation and adds the Organization model.
// FIX: Added the missing 'organizationId' and relation to the Transaction model.

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_DATABASE_URL")
  extensions = [pgcrypto]
}

// -- Core Multi-Tenant Model --
model Organization {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  users        User[]
  branches     Branch[]
  products     Product[]
  categories   Category[]
  customers    Customer[]
  orders       Order[]
  expenses     Expense[]
  transactions Transaction[] // Added relation
}

model User {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  email          String?      @unique
  passwordHash   String?
  pinCode        String?      @db.VarChar(6)
  role           String       @default("admin")
  createdAt      DateTime     @default(now()) @db.Timestamp(6)
  updatedAt      DateTime     @updatedAt
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  orderEvents    OrderEvent[]
  transactions   Transaction[]
}

model Branch {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  address        String
  contact        String
  gstin          String
  timezone       String         @default("Asia/Kolkata")
  organizationId String         @db.Uuid
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  batchRuns      BatchRun[]
  expenses       Expense[]
  inventory      Inventory[]
  orders         Order[]
  products       Product[]
  branchCharges  BranchCharge[]
}

model Category {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  products       Product[]
  @@unique([organizationId, name])
}

model Product {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId       String?      @db.Uuid
  categoryId     String?      @db.Uuid
  name           String
  unitPrice      Decimal      @db.Decimal
  unit           String       @default("pcs")
  madeToOrder    Boolean      @default(true)
  isActive       Boolean      @default(true)
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  batchRuns      BatchRun[]
  boms           Bom[]
  orderItems     OrderItem[]
  branches       Branch?      @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  categories     Category?    @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
}

model Customer {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String?
  phone          String?
  email          String?
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  orders         Order[]
  @@unique([organizationId, phone])
}

model Order {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId       String        @db.Uuid
  source         String        @default("in_store")
  customerName   String?
  customerPhone  String?
  aggregatorId   String?
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  status         String        @default("completed")
  customerId     String?       @db.Uuid
  updatedAt      DateTime?     @updatedAt
  deletedAt      DateTime?
  orderNotes     String?
  invoiceNumber  Int?
  invoicePrefix  String?
  organizationId String        @db.Uuid
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  orderCharges   OrderCharge[]
  orderCoupons   OrderCoupon[]
  orderEvents    OrderEvent[]
  orderItems     OrderItem[]
  orderTaxes     OrderTax[]
  branches       Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customers      Customer?     @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments       Payment[]
  transactions   Transaction[]
}

model Payment {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId         String        @db.Uuid
  method          String
  amount          Decimal       @db.Decimal
  status          String        @default("paid")
  paidAt          DateTime?     @db.Timestamptz(6)
  cashGiven       Decimal?
  changeGiven     Decimal?
  gatewayTxnId    String?
  refundedAmount  Decimal?      @default(0) @db.Decimal
  updatedAt       DateTime?     @updatedAt
  deletedAt       DateTime?
  orders          Order         @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions    Transaction[]
}

model Expense {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId       String?      @db.Uuid
  category       String?
  amount         Decimal      @db.Decimal
  date           DateTime     @default(dbgenerated("CURRENT_DATE")) @db.Date
  description    String?
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  branches       Branch?      @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model OrderItem {
  id                   String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId              String              @db.Uuid
  productId            String?             @db.Uuid
  quantity             Decimal             @db.Decimal
  unitPrice            Decimal             @db.Decimal
  discountAmt          Decimal             @default(0) @db.Decimal
  updatedAt            DateTime?           @updatedAt
  deletedAt            DateTime?
  orderItemModifiers   OrderItemModifier[]
  orders               Order               @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products             Product?            @relation(fields: [productId], references: [id], onUpdate: NoAction)
}

model BatchRun {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId     String   @db.Uuid
  productId    String?  @db.Uuid
  qtyProduced  Decimal  @db.Decimal
  wastageQty   Decimal  @default(0) @db.Decimal
  runTs        DateTime @default(now()) @db.Timestamptz(6)
  branches     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products     Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Bom {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId       String?      @db.Uuid
  rawMaterialId   String?      @db.Uuid
  qtyPerUnit      Decimal      @db.Decimal
  products        Product?     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  raw_materials   RawMaterial? @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Inventory {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId         String?  @db.Uuid
  itemType         String
  itemId           String   @db.Uuid
  stockQty         Decimal  @default(0) @db.Decimal
  lastAdjustedAt   DateTime @default(now()) @db.Timestamptz(6)
  branches         Branch?  @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Transaction {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId        String?      @db.Uuid
  paymentId      String?      @db.Uuid
  amount         Decimal      @db.Decimal
  category       String?
  type           String?
  status         String       @default("completed")
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  userUid        String?      @db.Uuid
  description    String?
  organizationId String       @db.Uuid // FIX: Added field
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade) // FIX: Added relation
  orders         Order?       @relation(fields: [orderId], references: [id], onUpdate: NoAction)
  payments       Payment?     @relation(fields: [paymentId], references: [id], onUpdate: NoAction)
  users          User?        @relation(fields: [userUid], references: [id], onUpdate: NoAction)
}

model RawMaterial {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  unit          String
  reorderPoint  Decimal @default(0) @db.Decimal
  boms          Bom[]
}

model Coupon {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code         String        @unique
  type         String
  value        Decimal       @db.Decimal
  maxUses      Int?          @default(1)
  expiresAt    DateTime?     @db.Timestamptz(6)
  orderCoupons OrderCoupon[]
}

model OrderCharge {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String?  @db.Uuid
  type      String
  amount    Decimal  @default(0) @db.Decimal
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  orders    Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model OrderTax {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String?  @db.Uuid
  type      String
  percent   Decimal? @db.Decimal
  amount    Decimal  @default(0) @db.Decimal
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  orders    Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model OrderCoupon {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String?  @db.Uuid
  couponId  String?  @db.Uuid
  code      String?
  value     Decimal  @default(0) @db.Decimal
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  coupons   Coupon?  @relation(fields: [couponId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders    Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model OrderEvent {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String?  @db.Uuid
  userId    String?  @db.Uuid
  eventType String
  details   String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  orders    Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model OrderItemModifier {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderItemId String?   @db.Uuid
  name        String
  value       String?
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  orderItems  OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model BranchCharge {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId   String   @db.Uuid
  type       String
  amount     Decimal  @db.Decimal
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt
  branches   Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
}
